// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "edcpayload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace edcdatatypes {

namespace {

const ::google::protobuf::Descriptor* EdcPayload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdcPayload_reflection_ = NULL;
const ::google::protobuf::Descriptor* EdcPayload_EdcMetric_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdcPayload_EdcMetric_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EdcPayload_EdcMetric_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* EdcPayload_EdcPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EdcPayload_EdcPosition_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_edcpayload_2eproto() {
  protobuf_AddDesc_edcpayload_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "edcpayload.proto");
  GOOGLE_CHECK(file != NULL);
  EdcPayload_descriptor_ = file->message_type(0);
  static const int EdcPayload_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, metric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, body_),
  };
  EdcPayload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdcPayload_descriptor_,
      EdcPayload::default_instance_,
      EdcPayload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdcPayload));
  EdcPayload_EdcMetric_descriptor_ = EdcPayload_descriptor_->nested_type(0);
  static const int EdcPayload_EdcMetric_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, double_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, float_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, long_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, int_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, bool_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, string_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, bytes_value_),
  };
  EdcPayload_EdcMetric_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdcPayload_EdcMetric_descriptor_,
      EdcPayload_EdcMetric::default_instance_,
      EdcPayload_EdcMetric_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcMetric, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdcPayload_EdcMetric));
  EdcPayload_EdcMetric_ValueType_descriptor_ = EdcPayload_EdcMetric_descriptor_->enum_type(0);
  EdcPayload_EdcPosition_descriptor_ = EdcPayload_descriptor_->nested_type(1);
  static const int EdcPayload_EdcPosition_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, satellites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, status_),
  };
  EdcPayload_EdcPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EdcPayload_EdcPosition_descriptor_,
      EdcPayload_EdcPosition::default_instance_,
      EdcPayload_EdcPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EdcPayload_EdcPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EdcPayload_EdcPosition));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_edcpayload_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdcPayload_descriptor_, &EdcPayload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdcPayload_EdcMetric_descriptor_, &EdcPayload_EdcMetric::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EdcPayload_EdcPosition_descriptor_, &EdcPayload_EdcPosition::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_edcpayload_2eproto() {
  delete EdcPayload::default_instance_;
  delete EdcPayload_reflection_;
  delete EdcPayload_EdcMetric::default_instance_;
  delete EdcPayload_EdcMetric_reflection_;
  delete EdcPayload_EdcPosition::default_instance_;
  delete EdcPayload_EdcPosition_reflection_;
}

void protobuf_AddDesc_edcpayload_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020edcpayload.proto\022\014edcdatatypes\"\227\005\n\nEdc"
    "Payload\022\021\n\ttimestamp\030\001 \001(\003\0226\n\010position\030\002"
    " \001(\0132$.edcdatatypes.EdcPayload.EdcPositi"
    "on\0223\n\006metric\030\210\' \003(\0132\".edcdatatypes.EdcPa"
    "yload.EdcMetric\022\r\n\004body\030\211\' \001(\014\032\301\002\n\tEdcMe"
    "tric\022\014\n\004name\030\001 \002(\t\022:\n\004type\030\002 \002(\0162,.edcda"
    "tatypes.EdcPayload.EdcMetric.ValueType\022\024"
    "\n\014double_value\030\003 \001(\001\022\023\n\013float_value\030\004 \001("
    "\002\022\022\n\nlong_value\030\005 \001(\003\022\021\n\tint_value\030\006 \001(\005"
    "\022\022\n\nbool_value\030\007 \001(\010\022\024\n\014string_value\030\010 \001"
    "(\t\022\023\n\013bytes_value\030\t \001(\014\"Y\n\tValueType\022\n\n\006"
    "DOUBLE\020\000\022\t\n\005FLOAT\020\001\022\t\n\005INT64\020\002\022\t\n\005INT32\020"
    "\003\022\010\n\004BOOL\020\004\022\n\n\006STRING\020\005\022\t\n\005BYTES\020\006\032\256\001\n\013E"
    "dcPosition\022\020\n\010latitude\030\001 \002(\001\022\021\n\tlongitud"
    "e\030\002 \002(\001\022\020\n\010altitude\030\003 \001(\001\022\021\n\tprecision\030\004"
    " \001(\001\022\017\n\007heading\030\005 \001(\001\022\r\n\005speed\030\006 \001(\001\022\021\n\t"
    "timestamp\030\007 \001(\003\022\022\n\nsatellites\030\010 \001(\005\022\016\n\006s"
    "tatus\030\t \001(\005*\005\010\003\020\210\'B6\n#com.eurotech.cloud"
    ".message.protobufB\017EdcPayloadProto", 754);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "edcpayload.proto", &protobuf_RegisterTypes);
  EdcPayload::default_instance_ = new EdcPayload();
  EdcPayload_EdcMetric::default_instance_ = new EdcPayload_EdcMetric();
  EdcPayload_EdcPosition::default_instance_ = new EdcPayload_EdcPosition();
  EdcPayload::default_instance_->InitAsDefaultInstance();
  EdcPayload_EdcMetric::default_instance_->InitAsDefaultInstance();
  EdcPayload_EdcPosition::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_edcpayload_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_edcpayload_2eproto {
  StaticDescriptorInitializer_edcpayload_2eproto() {
    protobuf_AddDesc_edcpayload_2eproto();
  }
} static_descriptor_initializer_edcpayload_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* EdcPayload_EdcMetric_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdcPayload_EdcMetric_ValueType_descriptor_;
}
bool EdcPayload_EdcMetric_ValueType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::DOUBLE;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::FLOAT;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::INT64;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::INT32;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::BOOL;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::STRING;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::BYTES;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::ValueType_MIN;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::ValueType_MAX;
const int EdcPayload_EdcMetric::ValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EdcPayload_EdcMetric::kNameFieldNumber;
const int EdcPayload_EdcMetric::kTypeFieldNumber;
const int EdcPayload_EdcMetric::kDoubleValueFieldNumber;
const int EdcPayload_EdcMetric::kFloatValueFieldNumber;
const int EdcPayload_EdcMetric::kLongValueFieldNumber;
const int EdcPayload_EdcMetric::kIntValueFieldNumber;
const int EdcPayload_EdcMetric::kBoolValueFieldNumber;
const int EdcPayload_EdcMetric::kStringValueFieldNumber;
const int EdcPayload_EdcMetric::kBytesValueFieldNumber;
#endif  // !_MSC_VER

EdcPayload_EdcMetric::EdcPayload_EdcMetric()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdcPayload_EdcMetric::InitAsDefaultInstance() {
}

EdcPayload_EdcMetric::EdcPayload_EdcMetric(const EdcPayload_EdcMetric& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdcPayload_EdcMetric::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  double_value_ = 0;
  float_value_ = 0;
  long_value_ = GOOGLE_LONGLONG(0);
  int_value_ = 0;
  bool_value_ = false;
  string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bytes_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdcPayload_EdcMetric::~EdcPayload_EdcMetric() {
  SharedDtor();
}

void EdcPayload_EdcMetric::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    delete string_value_;
  }
  if (bytes_value_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_value_;
  }
  if (this != default_instance_) {
  }
}

void EdcPayload_EdcMetric::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdcPayload_EdcMetric::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdcPayload_EdcMetric_descriptor_;
}

const EdcPayload_EdcMetric& EdcPayload_EdcMetric::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edcpayload_2eproto();  return *default_instance_;
}

EdcPayload_EdcMetric* EdcPayload_EdcMetric::default_instance_ = NULL;

EdcPayload_EdcMetric* EdcPayload_EdcMetric::New() const {
  return new EdcPayload_EdcMetric;
}

void EdcPayload_EdcMetric::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    double_value_ = 0;
    float_value_ = 0;
    long_value_ = GOOGLE_LONGLONG(0);
    int_value_ = 0;
    bool_value_ = false;
    if (has_string_value()) {
      if (string_value_ != &::google::protobuf::internal::kEmptyString) {
        string_value_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bytes_value()) {
      if (bytes_value_ != &::google::protobuf::internal::kEmptyString) {
        bytes_value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdcPayload_EdcMetric::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), (int)(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required .edcdatatypes.EdcPayload.EdcMetric.ValueType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::edcdatatypes::EdcPayload_EdcMetric_ValueType_IsValid(value)) {
            set_type(static_cast< ::edcdatatypes::EdcPayload_EdcMetric_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_double_value;
        break;
      }
      
      // optional double double_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_double_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &double_value_)));
          set_has_double_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_float_value;
        break;
      }
      
      // optional float float_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_float_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
          set_has_float_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_long_value;
        break;
      }
      
      // optional int64 long_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_long_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &long_value_)));
          set_has_long_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_int_value;
        break;
      }
      
      // optional int32 int_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &int_value_)));
          set_has_int_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bool_value;
        break;
      }
      
      // optional bool bool_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bool_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bool_value_)));
          set_has_bool_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_string_value;
        break;
      }
      
      // optional string string_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_value().data(), (int)(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bytes_value;
        break;
      }
      
      // optional bytes bytes_value = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bytes_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdcPayload_EdcMetric::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), (int)(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required .edcdatatypes.EdcPayload.EdcMetric.ValueType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional double double_value = 3;
  if (has_double_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_value(), output);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }
  
  // optional int64 long_value = 5;
  if (has_long_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->long_value(), output);
  }
  
  // optional int32 int_value = 6;
  if (has_int_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->int_value(), output);
  }
  
  // optional bool bool_value = 7;
  if (has_bool_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bool_value(), output);
  }
  
  // optional string string_value = 8;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), (int)(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->string_value(), output);
  }
  
  // optional bytes bytes_value = 9;
  if (has_bytes_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->bytes_value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdcPayload_EdcMetric::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), (int)(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required .edcdatatypes.EdcPayload.EdcMetric.ValueType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional double double_value = 3;
  if (has_double_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_value(), target);
  }
  
  // optional float float_value = 4;
  if (has_float_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }
  
  // optional int64 long_value = 5;
  if (has_long_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->long_value(), target);
  }
  
  // optional int32 int_value = 6;
  if (has_int_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->int_value(), target);
  }
  
  // optional bool bool_value = 7;
  if (has_bool_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bool_value(), target);
  }
  
  // optional string string_value = 8;
  if (has_string_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_value().data(), (int)(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->string_value(), target);
  }
  
  // optional bytes bytes_value = 9;
  if (has_bytes_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->bytes_value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdcPayload_EdcMetric::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required .edcdatatypes.EdcPayload.EdcMetric.ValueType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double double_value = 3;
    if (has_double_value()) {
      total_size += 1 + 8;
    }
    
    // optional float float_value = 4;
    if (has_float_value()) {
      total_size += 1 + 4;
    }
    
    // optional int64 long_value = 5;
    if (has_long_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->long_value());
    }
    
    // optional int32 int_value = 6;
    if (has_int_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_value());
    }
    
    // optional bool bool_value = 7;
    if (has_bool_value()) {
      total_size += 1 + 1;
    }
    
    // optional string string_value = 8;
    if (has_string_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes bytes_value = 9;
    if (has_bytes_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdcPayload_EdcMetric::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdcPayload_EdcMetric* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdcPayload_EdcMetric*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdcPayload_EdcMetric::MergeFrom(const EdcPayload_EdcMetric& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_double_value()) {
      set_double_value(from.double_value());
    }
    if (from.has_float_value()) {
      set_float_value(from.float_value());
    }
    if (from.has_long_value()) {
      set_long_value(from.long_value());
    }
    if (from.has_int_value()) {
      set_int_value(from.int_value());
    }
    if (from.has_bool_value()) {
      set_bool_value(from.bool_value());
    }
    if (from.has_string_value()) {
      set_string_value(from.string_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bytes_value()) {
      set_bytes_value(from.bytes_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdcPayload_EdcMetric::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdcPayload_EdcMetric::CopyFrom(const EdcPayload_EdcMetric& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdcPayload_EdcMetric::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EdcPayload_EdcMetric::Swap(EdcPayload_EdcMetric* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(double_value_, other->double_value_);
    std::swap(float_value_, other->float_value_);
    std::swap(long_value_, other->long_value_);
    std::swap(int_value_, other->int_value_);
    std::swap(bool_value_, other->bool_value_);
    std::swap(string_value_, other->string_value_);
    std::swap(bytes_value_, other->bytes_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdcPayload_EdcMetric::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdcPayload_EdcMetric_descriptor_;
  metadata.reflection = EdcPayload_EdcMetric_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EdcPayload_EdcPosition::kLatitudeFieldNumber;
const int EdcPayload_EdcPosition::kLongitudeFieldNumber;
const int EdcPayload_EdcPosition::kAltitudeFieldNumber;
const int EdcPayload_EdcPosition::kPrecisionFieldNumber;
const int EdcPayload_EdcPosition::kHeadingFieldNumber;
const int EdcPayload_EdcPosition::kSpeedFieldNumber;
const int EdcPayload_EdcPosition::kTimestampFieldNumber;
const int EdcPayload_EdcPosition::kSatellitesFieldNumber;
const int EdcPayload_EdcPosition::kStatusFieldNumber;
#endif  // !_MSC_VER

EdcPayload_EdcPosition::EdcPayload_EdcPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdcPayload_EdcPosition::InitAsDefaultInstance() {
}

EdcPayload_EdcPosition::EdcPayload_EdcPosition(const EdcPayload_EdcPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdcPayload_EdcPosition::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  precision_ = 0;
  heading_ = 0;
  speed_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  satellites_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdcPayload_EdcPosition::~EdcPayload_EdcPosition() {
  SharedDtor();
}

void EdcPayload_EdcPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EdcPayload_EdcPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdcPayload_EdcPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdcPayload_EdcPosition_descriptor_;
}

const EdcPayload_EdcPosition& EdcPayload_EdcPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edcpayload_2eproto();  return *default_instance_;
}

EdcPayload_EdcPosition* EdcPayload_EdcPosition::default_instance_ = NULL;

EdcPayload_EdcPosition* EdcPayload_EdcPosition::New() const {
  return new EdcPayload_EdcPosition;
}

void EdcPayload_EdcPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    latitude_ = 0;
    longitude_ = 0;
    altitude_ = 0;
    precision_ = 0;
    heading_ = 0;
    speed_ = 0;
    timestamp_ = GOOGLE_LONGLONG(0);
    satellites_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdcPayload_EdcPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }
      
      // required double longitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_altitude;
        break;
      }
      
      // optional double altitude = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_precision;
        break;
      }
      
      // optional double precision = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_heading;
        break;
      }
      
      // optional double heading = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_speed;
        break;
      }
      
      // optional double speed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_timestamp;
        break;
      }
      
      // optional int64 timestamp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_satellites;
        break;
      }
      
      // optional int32 satellites = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_satellites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellites_)));
          set_has_satellites();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_status;
        break;
      }
      
      // optional int32 status = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdcPayload_EdcPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }
  
  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }
  
  // optional double altitude = 3;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }
  
  // optional double precision = 4;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->precision(), output);
  }
  
  // optional double heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }
  
  // optional double speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->speed(), output);
  }
  
  // optional int64 timestamp = 7;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->timestamp(), output);
  }
  
  // optional int32 satellites = 8;
  if (has_satellites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->satellites(), output);
  }
  
  // optional int32 status = 9;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdcPayload_EdcPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }
  
  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }
  
  // optional double altitude = 3;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }
  
  // optional double precision = 4;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->precision(), target);
  }
  
  // optional double heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }
  
  // optional double speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->speed(), target);
  }
  
  // optional int64 timestamp = 7;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->timestamp(), target);
  }
  
  // optional int32 satellites = 8;
  if (has_satellites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->satellites(), target);
  }
  
  // optional int32 status = 9;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdcPayload_EdcPosition::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
    // optional double altitude = 3;
    if (has_altitude()) {
      total_size += 1 + 8;
    }
    
    // optional double precision = 4;
    if (has_precision()) {
      total_size += 1 + 8;
    }
    
    // optional double heading = 5;
    if (has_heading()) {
      total_size += 1 + 8;
    }
    
    // optional double speed = 6;
    if (has_speed()) {
      total_size += 1 + 8;
    }
    
    // optional int64 timestamp = 7;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional int32 satellites = 8;
    if (has_satellites()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satellites());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 status = 9;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdcPayload_EdcPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdcPayload_EdcPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdcPayload_EdcPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdcPayload_EdcPosition::MergeFrom(const EdcPayload_EdcPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_satellites()) {
      set_satellites(from.satellites());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdcPayload_EdcPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdcPayload_EdcPosition::CopyFrom(const EdcPayload_EdcPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdcPayload_EdcPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void EdcPayload_EdcPosition::Swap(EdcPayload_EdcPosition* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(precision_, other->precision_);
    std::swap(heading_, other->heading_);
    std::swap(speed_, other->speed_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(satellites_, other->satellites_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EdcPayload_EdcPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdcPayload_EdcPosition_descriptor_;
  metadata.reflection = EdcPayload_EdcPosition_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int EdcPayload::kTimestampFieldNumber;
const int EdcPayload::kPositionFieldNumber;
const int EdcPayload::kMetricFieldNumber;
const int EdcPayload::kBodyFieldNumber;
#endif  // !_MSC_VER

EdcPayload::EdcPayload()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EdcPayload::InitAsDefaultInstance() {
  position_ = const_cast< ::edcdatatypes::EdcPayload_EdcPosition*>(&::edcdatatypes::EdcPayload_EdcPosition::default_instance());
}

EdcPayload::EdcPayload(const EdcPayload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EdcPayload::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  position_ = NULL;
  body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EdcPayload::~EdcPayload() {
  SharedDtor();
}

void EdcPayload::SharedDtor() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void EdcPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EdcPayload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EdcPayload_descriptor_;
}

const EdcPayload& EdcPayload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_edcpayload_2eproto();  return *default_instance_;
}

EdcPayload* EdcPayload::default_instance_ = NULL;

EdcPayload* EdcPayload::New() const {
  return new EdcPayload;
}

void EdcPayload::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_position()) {
      if (position_ != NULL) position_->::edcdatatypes::EdcPayload_EdcPosition::Clear();
    }
    if (has_body()) {
      if (body_ != &::google::protobuf::internal::kEmptyString) {
        body_->clear();
      }
    }
  }
  metric_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EdcPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .edcdatatypes.EdcPayload.EdcPosition position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40002)) goto parse_metric;
        break;
      }
      
      // repeated .edcdatatypes.EdcPayload.EdcMetric metric = 5000;
      case 5000: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metric:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_metric()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40002)) goto parse_metric;
        if (input->ExpectTag(40010)) goto parse_body;
        break;
      }
      
      // optional bytes body = 5001;
      case 5001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((24u <= tag && tag < 40000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EdcPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }
  
  // optional .edcdatatypes.EdcPayload.EdcPosition position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  // Extension range [3, 5000)
  _extensions_.SerializeWithCachedSizes(
      3, 5000, output);
  
  // repeated .edcdatatypes.EdcPayload.EdcMetric metric = 5000;
  for (int i = 0; i < this->metric_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5000, this->metric(i), output);
  }
  
  // optional bytes body = 5001;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5001, this->body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EdcPayload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional .edcdatatypes.EdcPayload.EdcPosition position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  // Extension range [3, 5000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      3, 5000, target);
  
  // repeated .edcdatatypes.EdcPayload.EdcMetric metric = 5000;
  for (int i = 0; i < this->metric_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5000, this->metric(i), target);
  }
  
  // optional bytes body = 5001;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5001, this->body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EdcPayload::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }
    
    // optional .edcdatatypes.EdcPayload.EdcPosition position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional bytes body = 5001;
    if (has_body()) {
      total_size += 3 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->body());
    }
    
  }
  // repeated .edcdatatypes.EdcPayload.EdcMetric metric = 5000;
  total_size += 3 * this->metric_size();
  for (int i = 0; i < this->metric_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->metric(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EdcPayload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EdcPayload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EdcPayload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EdcPayload::MergeFrom(const EdcPayload& from) {
  GOOGLE_CHECK_NE(&from, this);
  metric_.MergeFrom(from.metric_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_position()) {
      mutable_position()->::edcdatatypes::EdcPayload_EdcPosition::MergeFrom(from.position());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EdcPayload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdcPayload::CopyFrom(const EdcPayload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdcPayload::IsInitialized() const {
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  for (int i = 0; i < metric_size(); i++) {
    if (!this->metric(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void EdcPayload::Swap(EdcPayload* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(position_, other->position_);
    metric_.Swap(&other->metric_);
    std::swap(body_, other->body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata EdcPayload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EdcPayload_descriptor_;
  metadata.reflection = EdcPayload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace edcdatatypes

// @@protoc_insertion_point(global_scope)
