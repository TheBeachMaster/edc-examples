// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: edcpayload.proto

#ifndef PROTOBUF_edcpayload_2eproto__INCLUDED
#define PROTOBUF_edcpayload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace edcdatatypes {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_edcpayload_2eproto();
void protobuf_AssignDesc_edcpayload_2eproto();
void protobuf_ShutdownFile_edcpayload_2eproto();

class EdcPayload;
class EdcPayload_EdcMetric;
class EdcPayload_EdcPosition;

enum EdcPayload_EdcMetric_ValueType {
  EdcPayload_EdcMetric_ValueType_DOUBLE = 0,
  EdcPayload_EdcMetric_ValueType_FLOAT = 1,
  EdcPayload_EdcMetric_ValueType_INT64 = 2,
  EdcPayload_EdcMetric_ValueType_INT32 = 3,
  EdcPayload_EdcMetric_ValueType_BOOL = 4,
  EdcPayload_EdcMetric_ValueType_STRING = 5,
  EdcPayload_EdcMetric_ValueType_BYTES = 6
};
bool EdcPayload_EdcMetric_ValueType_IsValid(int value);
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric_ValueType_ValueType_MIN = EdcPayload_EdcMetric_ValueType_DOUBLE;
const EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric_ValueType_ValueType_MAX = EdcPayload_EdcMetric_ValueType_BYTES;
const int EdcPayload_EdcMetric_ValueType_ValueType_ARRAYSIZE = EdcPayload_EdcMetric_ValueType_ValueType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EdcPayload_EdcMetric_ValueType_descriptor();
inline const ::std::string& EdcPayload_EdcMetric_ValueType_Name(EdcPayload_EdcMetric_ValueType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EdcPayload_EdcMetric_ValueType_descriptor(), value);
}
inline bool EdcPayload_EdcMetric_ValueType_Parse(
    const ::std::string& name, EdcPayload_EdcMetric_ValueType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EdcPayload_EdcMetric_ValueType>(
    EdcPayload_EdcMetric_ValueType_descriptor(), name, value);
}
// ===================================================================

class EdcPayload_EdcMetric : public ::google::protobuf::Message {
 public:
  EdcPayload_EdcMetric();
  virtual ~EdcPayload_EdcMetric();
  
  EdcPayload_EdcMetric(const EdcPayload_EdcMetric& from);
  
  inline EdcPayload_EdcMetric& operator=(const EdcPayload_EdcMetric& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EdcPayload_EdcMetric& default_instance();
  
  void Swap(EdcPayload_EdcMetric* other);
  
  // implements Message ----------------------------------------------
  
  EdcPayload_EdcMetric* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdcPayload_EdcMetric& from);
  void MergeFrom(const EdcPayload_EdcMetric& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef EdcPayload_EdcMetric_ValueType ValueType;
  static const ValueType DOUBLE = EdcPayload_EdcMetric_ValueType_DOUBLE;
  static const ValueType FLOAT = EdcPayload_EdcMetric_ValueType_FLOAT;
  static const ValueType INT64 = EdcPayload_EdcMetric_ValueType_INT64;
  static const ValueType INT32 = EdcPayload_EdcMetric_ValueType_INT32;
  static const ValueType BOOL = EdcPayload_EdcMetric_ValueType_BOOL;
  static const ValueType STRING = EdcPayload_EdcMetric_ValueType_STRING;
  static const ValueType BYTES = EdcPayload_EdcMetric_ValueType_BYTES;
  static inline bool ValueType_IsValid(int value) {
    return EdcPayload_EdcMetric_ValueType_IsValid(value);
  }
  static const ValueType ValueType_MIN =
    EdcPayload_EdcMetric_ValueType_ValueType_MIN;
  static const ValueType ValueType_MAX =
    EdcPayload_EdcMetric_ValueType_ValueType_MAX;
  static const int ValueType_ARRAYSIZE =
    EdcPayload_EdcMetric_ValueType_ValueType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ValueType_descriptor() {
    return EdcPayload_EdcMetric_ValueType_descriptor();
  }
  static inline const ::std::string& ValueType_Name(ValueType value) {
    return EdcPayload_EdcMetric_ValueType_Name(value);
  }
  static inline bool ValueType_Parse(const ::std::string& name,
      ValueType* value) {
    return EdcPayload_EdcMetric_ValueType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required .edcdatatypes.EdcPayload.EdcMetric.ValueType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::edcdatatypes::EdcPayload_EdcMetric_ValueType type() const;
  inline void set_type(::edcdatatypes::EdcPayload_EdcMetric_ValueType value);
  
  // optional double double_value = 3;
  inline bool has_double_value() const;
  inline void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  inline double double_value() const;
  inline void set_double_value(double value);
  
  // optional float float_value = 4;
  inline bool has_float_value() const;
  inline void clear_float_value();
  static const int kFloatValueFieldNumber = 4;
  inline float float_value() const;
  inline void set_float_value(float value);
  
  // optional int64 long_value = 5;
  inline bool has_long_value() const;
  inline void clear_long_value();
  static const int kLongValueFieldNumber = 5;
  inline ::google::protobuf::int64 long_value() const;
  inline void set_long_value(::google::protobuf::int64 value);
  
  // optional int32 int_value = 6;
  inline bool has_int_value() const;
  inline void clear_int_value();
  static const int kIntValueFieldNumber = 6;
  inline ::google::protobuf::int32 int_value() const;
  inline void set_int_value(::google::protobuf::int32 value);
  
  // optional bool bool_value = 7;
  inline bool has_bool_value() const;
  inline void clear_bool_value();
  static const int kBoolValueFieldNumber = 7;
  inline bool bool_value() const;
  inline void set_bool_value(bool value);
  
  // optional string string_value = 8;
  inline bool has_string_value() const;
  inline void clear_string_value();
  static const int kStringValueFieldNumber = 8;
  inline const ::std::string& string_value() const;
  inline void set_string_value(const ::std::string& value);
  inline void set_string_value(const char* value);
  inline void set_string_value(const char* value, size_t size);
  inline ::std::string* mutable_string_value();
  inline ::std::string* release_string_value();
  
  // optional bytes bytes_value = 9;
  inline bool has_bytes_value() const;
  inline void clear_bytes_value();
  static const int kBytesValueFieldNumber = 9;
  inline const ::std::string& bytes_value() const;
  inline void set_bytes_value(const ::std::string& value);
  inline void set_bytes_value(const char* value);
  inline void set_bytes_value(const void* value, size_t size);
  inline ::std::string* mutable_bytes_value();
  inline ::std::string* release_bytes_value();
  
  // @@protoc_insertion_point(class_scope:edcdatatypes.EdcPayload.EdcMetric)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_double_value();
  inline void clear_has_double_value();
  inline void set_has_float_value();
  inline void clear_has_float_value();
  inline void set_has_long_value();
  inline void clear_has_long_value();
  inline void set_has_int_value();
  inline void clear_has_int_value();
  inline void set_has_bool_value();
  inline void clear_has_bool_value();
  inline void set_has_string_value();
  inline void clear_has_string_value();
  inline void set_has_bytes_value();
  inline void clear_has_bytes_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  double double_value_;
  int type_;
  float float_value_;
  ::google::protobuf::int64 long_value_;
  ::google::protobuf::int32 int_value_;
  bool bool_value_;
  ::std::string* string_value_;
  ::std::string* bytes_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_edcpayload_2eproto();
  friend void protobuf_AssignDesc_edcpayload_2eproto();
  friend void protobuf_ShutdownFile_edcpayload_2eproto();
  
  void InitAsDefaultInstance();
  static EdcPayload_EdcMetric* default_instance_;
};
// -------------------------------------------------------------------

class EdcPayload_EdcPosition : public ::google::protobuf::Message {
 public:
  EdcPayload_EdcPosition();
  virtual ~EdcPayload_EdcPosition();
  
  EdcPayload_EdcPosition(const EdcPayload_EdcPosition& from);
  
  inline EdcPayload_EdcPosition& operator=(const EdcPayload_EdcPosition& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EdcPayload_EdcPosition& default_instance();
  
  void Swap(EdcPayload_EdcPosition* other);
  
  // implements Message ----------------------------------------------
  
  EdcPayload_EdcPosition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdcPayload_EdcPosition& from);
  void MergeFrom(const EdcPayload_EdcPosition& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);
  
  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);
  
  // optional double altitude = 3;
  inline bool has_altitude() const;
  inline void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  inline double altitude() const;
  inline void set_altitude(double value);
  
  // optional double precision = 4;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 4;
  inline double precision() const;
  inline void set_precision(double value);
  
  // optional double heading = 5;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 5;
  inline double heading() const;
  inline void set_heading(double value);
  
  // optional double speed = 6;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 6;
  inline double speed() const;
  inline void set_speed(double value);
  
  // optional int64 timestamp = 7;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 7;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional int32 satellites = 8;
  inline bool has_satellites() const;
  inline void clear_satellites();
  static const int kSatellitesFieldNumber = 8;
  inline ::google::protobuf::int32 satellites() const;
  inline void set_satellites(::google::protobuf::int32 value);
  
  // optional int32 status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:edcdatatypes.EdcPayload.EdcPosition)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_satellites();
  inline void clear_has_satellites();
  inline void set_has_status();
  inline void clear_has_status();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double latitude_;
  double longitude_;
  double altitude_;
  double precision_;
  double heading_;
  double speed_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::int32 satellites_;
  ::google::protobuf::int32 status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_edcpayload_2eproto();
  friend void protobuf_AssignDesc_edcpayload_2eproto();
  friend void protobuf_ShutdownFile_edcpayload_2eproto();
  
  void InitAsDefaultInstance();
  static EdcPayload_EdcPosition* default_instance_;
};
// -------------------------------------------------------------------

class EdcPayload : public ::google::protobuf::Message {
 public:
  EdcPayload();
  virtual ~EdcPayload();
  
  EdcPayload(const EdcPayload& from);
  
  inline EdcPayload& operator=(const EdcPayload& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EdcPayload& default_instance();
  
  void Swap(EdcPayload* other);
  
  // implements Message ----------------------------------------------
  
  EdcPayload* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdcPayload& from);
  void MergeFrom(const EdcPayload& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef EdcPayload_EdcMetric EdcMetric;
  typedef EdcPayload_EdcPosition EdcPosition;
  
  // accessors -------------------------------------------------------
  
  // optional int64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);
  
  // optional .edcdatatypes.EdcPayload.EdcPosition position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline const ::edcdatatypes::EdcPayload_EdcPosition& position() const;
  inline ::edcdatatypes::EdcPayload_EdcPosition* mutable_position();
  inline ::edcdatatypes::EdcPayload_EdcPosition* release_position();
  
  // repeated .edcdatatypes.EdcPayload.EdcMetric metric = 5000;
  inline int metric_size() const;
  inline void clear_metric();
  static const int kMetricFieldNumber = 5000;
  inline const ::edcdatatypes::EdcPayload_EdcMetric& metric(int index) const;
  inline ::edcdatatypes::EdcPayload_EdcMetric* mutable_metric(int index);
  inline ::edcdatatypes::EdcPayload_EdcMetric* add_metric();
  inline const ::google::protobuf::RepeatedPtrField< ::edcdatatypes::EdcPayload_EdcMetric >&
      metric() const;
  inline ::google::protobuf::RepeatedPtrField< ::edcdatatypes::EdcPayload_EdcMetric >*
      mutable_metric();
  
  // optional bytes body = 5001;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 5001;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const void* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(EdcPayload)
  // @@protoc_insertion_point(class_scope:edcdatatypes.EdcPayload)
 private:
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_body();
  inline void clear_has_body();
  
  ::google::protobuf::internal::ExtensionSet _extensions_;
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestamp_;
  ::edcdatatypes::EdcPayload_EdcPosition* position_;
  ::google::protobuf::RepeatedPtrField< ::edcdatatypes::EdcPayload_EdcMetric > metric_;
  ::std::string* body_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_edcpayload_2eproto();
  friend void protobuf_AssignDesc_edcpayload_2eproto();
  friend void protobuf_ShutdownFile_edcpayload_2eproto();
  
  void InitAsDefaultInstance();
  static EdcPayload* default_instance_;
};
// ===================================================================


// ===================================================================

// EdcPayload_EdcMetric

// required string name = 1;
inline bool EdcPayload_EdcMetric::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdcPayload_EdcMetric::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdcPayload_EdcMetric::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EdcPayload_EdcMetric::name() const {
  return *name_;
}
inline void EdcPayload_EdcMetric::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EdcPayload_EdcMetric::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EdcPayload_EdcMetric::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdcPayload_EdcMetric::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EdcPayload_EdcMetric::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required .edcdatatypes.EdcPayload.EdcMetric.ValueType type = 2;
inline bool EdcPayload_EdcMetric::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdcPayload_EdcMetric::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdcPayload_EdcMetric::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::edcdatatypes::EdcPayload_EdcMetric_ValueType EdcPayload_EdcMetric::type() const {
  return static_cast< ::edcdatatypes::EdcPayload_EdcMetric_ValueType >(type_);
}
inline void EdcPayload_EdcMetric::set_type(::edcdatatypes::EdcPayload_EdcMetric_ValueType value) {
  GOOGLE_DCHECK(::edcdatatypes::EdcPayload_EdcMetric_ValueType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional double double_value = 3;
inline bool EdcPayload_EdcMetric::has_double_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_double_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EdcPayload_EdcMetric::clear_has_double_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EdcPayload_EdcMetric::clear_double_value() {
  double_value_ = 0;
  clear_has_double_value();
}
inline double EdcPayload_EdcMetric::double_value() const {
  return double_value_;
}
inline void EdcPayload_EdcMetric::set_double_value(double value) {
  set_has_double_value();
  double_value_ = value;
}

// optional float float_value = 4;
inline bool EdcPayload_EdcMetric::has_float_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_float_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EdcPayload_EdcMetric::clear_has_float_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EdcPayload_EdcMetric::clear_float_value() {
  float_value_ = 0;
  clear_has_float_value();
}
inline float EdcPayload_EdcMetric::float_value() const {
  return float_value_;
}
inline void EdcPayload_EdcMetric::set_float_value(float value) {
  set_has_float_value();
  float_value_ = value;
}

// optional int64 long_value = 5;
inline bool EdcPayload_EdcMetric::has_long_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_long_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EdcPayload_EdcMetric::clear_has_long_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EdcPayload_EdcMetric::clear_long_value() {
  long_value_ = GOOGLE_LONGLONG(0);
  clear_has_long_value();
}
inline ::google::protobuf::int64 EdcPayload_EdcMetric::long_value() const {
  return long_value_;
}
inline void EdcPayload_EdcMetric::set_long_value(::google::protobuf::int64 value) {
  set_has_long_value();
  long_value_ = value;
}

// optional int32 int_value = 6;
inline bool EdcPayload_EdcMetric::has_int_value() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_int_value() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EdcPayload_EdcMetric::clear_has_int_value() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EdcPayload_EdcMetric::clear_int_value() {
  int_value_ = 0;
  clear_has_int_value();
}
inline ::google::protobuf::int32 EdcPayload_EdcMetric::int_value() const {
  return int_value_;
}
inline void EdcPayload_EdcMetric::set_int_value(::google::protobuf::int32 value) {
  set_has_int_value();
  int_value_ = value;
}

// optional bool bool_value = 7;
inline bool EdcPayload_EdcMetric::has_bool_value() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_bool_value() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EdcPayload_EdcMetric::clear_has_bool_value() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EdcPayload_EdcMetric::clear_bool_value() {
  bool_value_ = false;
  clear_has_bool_value();
}
inline bool EdcPayload_EdcMetric::bool_value() const {
  return bool_value_;
}
inline void EdcPayload_EdcMetric::set_bool_value(bool value) {
  set_has_bool_value();
  bool_value_ = value;
}

// optional string string_value = 8;
inline bool EdcPayload_EdcMetric::has_string_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_string_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EdcPayload_EdcMetric::clear_has_string_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EdcPayload_EdcMetric::clear_string_value() {
  if (string_value_ != &::google::protobuf::internal::kEmptyString) {
    string_value_->clear();
  }
  clear_has_string_value();
}
inline const ::std::string& EdcPayload_EdcMetric::string_value() const {
  return *string_value_;
}
inline void EdcPayload_EdcMetric::set_string_value(const ::std::string& value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void EdcPayload_EdcMetric::set_string_value(const char* value) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(value);
}
inline void EdcPayload_EdcMetric::set_string_value(const char* value, size_t size) {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  string_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdcPayload_EdcMetric::mutable_string_value() {
  set_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    string_value_ = new ::std::string;
  }
  return string_value_;
}
inline ::std::string* EdcPayload_EdcMetric::release_string_value() {
  clear_has_string_value();
  if (string_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = string_value_;
    string_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes bytes_value = 9;
inline bool EdcPayload_EdcMetric::has_bytes_value() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EdcPayload_EdcMetric::set_has_bytes_value() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EdcPayload_EdcMetric::clear_has_bytes_value() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EdcPayload_EdcMetric::clear_bytes_value() {
  if (bytes_value_ != &::google::protobuf::internal::kEmptyString) {
    bytes_value_->clear();
  }
  clear_has_bytes_value();
}
inline const ::std::string& EdcPayload_EdcMetric::bytes_value() const {
  return *bytes_value_;
}
inline void EdcPayload_EdcMetric::set_bytes_value(const ::std::string& value) {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::kEmptyString) {
    bytes_value_ = new ::std::string;
  }
  bytes_value_->assign(value);
}
inline void EdcPayload_EdcMetric::set_bytes_value(const char* value) {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::kEmptyString) {
    bytes_value_ = new ::std::string;
  }
  bytes_value_->assign(value);
}
inline void EdcPayload_EdcMetric::set_bytes_value(const void* value, size_t size) {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::kEmptyString) {
    bytes_value_ = new ::std::string;
  }
  bytes_value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdcPayload_EdcMetric::mutable_bytes_value() {
  set_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::kEmptyString) {
    bytes_value_ = new ::std::string;
  }
  return bytes_value_;
}
inline ::std::string* EdcPayload_EdcMetric::release_bytes_value() {
  clear_has_bytes_value();
  if (bytes_value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bytes_value_;
    bytes_value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// EdcPayload_EdcPosition

// required double latitude = 1;
inline bool EdcPayload_EdcPosition::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdcPayload_EdcPosition::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdcPayload_EdcPosition::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double EdcPayload_EdcPosition::latitude() const {
  return latitude_;
}
inline void EdcPayload_EdcPosition::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
}

// required double longitude = 2;
inline bool EdcPayload_EdcPosition::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdcPayload_EdcPosition::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdcPayload_EdcPosition::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double EdcPayload_EdcPosition::longitude() const {
  return longitude_;
}
inline void EdcPayload_EdcPosition::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
}

// optional double altitude = 3;
inline bool EdcPayload_EdcPosition::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EdcPayload_EdcPosition::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EdcPayload_EdcPosition::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double EdcPayload_EdcPosition::altitude() const {
  return altitude_;
}
inline void EdcPayload_EdcPosition::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
}

// optional double precision = 4;
inline bool EdcPayload_EdcPosition::has_precision() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_precision() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EdcPayload_EdcPosition::clear_has_precision() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EdcPayload_EdcPosition::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline double EdcPayload_EdcPosition::precision() const {
  return precision_;
}
inline void EdcPayload_EdcPosition::set_precision(double value) {
  set_has_precision();
  precision_ = value;
}

// optional double heading = 5;
inline bool EdcPayload_EdcPosition::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EdcPayload_EdcPosition::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EdcPayload_EdcPosition::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double EdcPayload_EdcPosition::heading() const {
  return heading_;
}
inline void EdcPayload_EdcPosition::set_heading(double value) {
  set_has_heading();
  heading_ = value;
}

// optional double speed = 6;
inline bool EdcPayload_EdcPosition::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EdcPayload_EdcPosition::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EdcPayload_EdcPosition::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline double EdcPayload_EdcPosition::speed() const {
  return speed_;
}
inline void EdcPayload_EdcPosition::set_speed(double value) {
  set_has_speed();
  speed_ = value;
}

// optional int64 timestamp = 7;
inline bool EdcPayload_EdcPosition::has_timestamp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_timestamp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EdcPayload_EdcPosition::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EdcPayload_EdcPosition::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 EdcPayload_EdcPosition::timestamp() const {
  return timestamp_;
}
inline void EdcPayload_EdcPosition::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional int32 satellites = 8;
inline bool EdcPayload_EdcPosition::has_satellites() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_satellites() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EdcPayload_EdcPosition::clear_has_satellites() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EdcPayload_EdcPosition::clear_satellites() {
  satellites_ = 0;
  clear_has_satellites();
}
inline ::google::protobuf::int32 EdcPayload_EdcPosition::satellites() const {
  return satellites_;
}
inline void EdcPayload_EdcPosition::set_satellites(::google::protobuf::int32 value) {
  set_has_satellites();
  satellites_ = value;
}

// optional int32 status = 9;
inline bool EdcPayload_EdcPosition::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EdcPayload_EdcPosition::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EdcPayload_EdcPosition::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EdcPayload_EdcPosition::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EdcPayload_EdcPosition::status() const {
  return status_;
}
inline void EdcPayload_EdcPosition::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// EdcPayload

// optional int64 timestamp = 1;
inline bool EdcPayload::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EdcPayload::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EdcPayload::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EdcPayload::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 EdcPayload::timestamp() const {
  return timestamp_;
}
inline void EdcPayload::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional .edcdatatypes.EdcPayload.EdcPosition position = 2;
inline bool EdcPayload::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EdcPayload::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EdcPayload::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EdcPayload::clear_position() {
  if (position_ != NULL) position_->::edcdatatypes::EdcPayload_EdcPosition::Clear();
  clear_has_position();
}
inline const ::edcdatatypes::EdcPayload_EdcPosition& EdcPayload::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::edcdatatypes::EdcPayload_EdcPosition* EdcPayload::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::edcdatatypes::EdcPayload_EdcPosition;
  return position_;
}
inline ::edcdatatypes::EdcPayload_EdcPosition* EdcPayload::release_position() {
  clear_has_position();
  ::edcdatatypes::EdcPayload_EdcPosition* temp = position_;
  position_ = NULL;
  return temp;
}

// repeated .edcdatatypes.EdcPayload.EdcMetric metric = 5000;
inline int EdcPayload::metric_size() const {
  return metric_.size();
}
inline void EdcPayload::clear_metric() {
  metric_.Clear();
}
inline const ::edcdatatypes::EdcPayload_EdcMetric& EdcPayload::metric(int index) const {
  return metric_.Get(index);
}
inline ::edcdatatypes::EdcPayload_EdcMetric* EdcPayload::mutable_metric(int index) {
  return metric_.Mutable(index);
}
inline ::edcdatatypes::EdcPayload_EdcMetric* EdcPayload::add_metric() {
  return metric_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::edcdatatypes::EdcPayload_EdcMetric >&
EdcPayload::metric() const {
  return metric_;
}
inline ::google::protobuf::RepeatedPtrField< ::edcdatatypes::EdcPayload_EdcMetric >*
EdcPayload::mutable_metric() {
  return &metric_;
}

// optional bytes body = 5001;
inline bool EdcPayload::has_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EdcPayload::set_has_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EdcPayload::clear_has_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EdcPayload::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& EdcPayload::body() const {
  return *body_;
}
inline void EdcPayload::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void EdcPayload::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void EdcPayload::set_body(const void* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EdcPayload::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* EdcPayload::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace edcdatatypes

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::edcdatatypes::EdcPayload_EdcMetric_ValueType>() {
  return ::edcdatatypes::EdcPayload_EdcMetric_ValueType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_edcpayload_2eproto__INCLUDED
